/** 
 * @class DS::MCPMT
 *  Data Structure: Hit PMT in Monte Carlo
 *
 *  @author Stan Seibert <sseibert@hep.upenn.edu>
 *
 *  This class represents a PMT in which at least one photoelectron
 *  was generated by an incident photon.
 */

#ifndef __RAT_DS_MCPMT__
#define __RAT_DS_MCPMT__

#include <vector>
#include <RAT/DS/MCPhoton.hh>
#include <RAT/Log.hh>

namespace RAT {
  namespace DS {

class MCPMT : public TObject {
public:
  MCPMT() : TObject() {}
  virtual ~MCPMT() {}

  /** ID number */
  virtual Int_t GetID() const { return id; };
  // virtual void SetID(Int_t _id) { id = _id; };
  virtual void SetID(Int_t _id) { //Mo changed. This is only for KamLAND
    if(_id < 6)
      id = _id + 2104;
    else if(_id > 6 && _id < 14)
      id = _id + 2110 - 6; 
    else if(_id >= 14 && _id < 22)
      id = _id + 2118 - 14;
    else if(_id >= 22 && _id < 247 )
      id = _id + 1879 - 22;
    else if (_id >= 247)
      id = _id - 247;   
  };

  /** Charge */
  virtual Float_t GetCharge() const;

  /** PMT type */
  virtual Int_t GetType() const { return type; };
  virtual void SetType(Int_t _type) { type = _type; };

  /** List of photoelectrons created in this PMT. */
  MCPhoton* GetMCPhoton(Int_t i) { return &photon[i]; }
  Int_t GetMCPhotonCount() const { return photon.size(); }
  MCPhoton* AddNewMCPhoton() {
    photon.resize(photon.size() + 1);
    return &photon.back();
  }
  void PruneMCPhoton() { photon.resize(0); }
 
  ClassDef(MCPMT, 1)
    
protected:
  Int_t id;
  Int_t type;
  std::vector<MCPhoton> photon;
};

  } // namespace DS
} // namespace RAT

#endif

